O que é React ?
- É uma biblioteca JavaScript para desenvolvimento de aplicações front-end
- São chamadas de SPA (Single Page Application)
- React é baseado em componentes
- Criado pelo Facebook

O que é NodeJs ?
- O Node é um run2time de JavaScript
- Uma biblioteca utilizada para compilar durante a execução de um programa
- Construir aplicações do lado do servidor
- Esta construida na V8 engine, criado pelo Google

O que é npm ?
- É um gerenciador de pacote do Node
- você utiliza bibliotecas de terceiros utilizando o npm
- Os modulos que são baixados ficam em uma pasta chamada node_modules
- Essa pasta node_modules deve ser descartavel, ou seja, a cada instalação do 
projeto baixamos todos os pacotes novamente com o comando 'npm install'

Criar projeto em React
- Criando aplicações em REact com um executor de script do Node, que é npx
- 'npx create-react-app<nome>' irá gerar a aplicação em React
- Para iniciar a aplicação 'npm start' irá rodar o projeto localmente, além de criar um endereço de ip

Criar projeto em React com Vite
- npm create vite@latest ou npm init vite 
- Para rodar o projeto digite 'npm run dev' que é o script que ele criou de forma automatica dentro de package.json

Estrutura base do React
- node_modules: Onde as dependências do projeto ficam;
- public: Assets estáticos e html de inicialização;
- src: Onde vamos programar as nossas apps;
- src/index.jsx: Arquivo de inicialização do React;
- src/App.js: Componente principal da aplicação;

Extensão que ajuda a acelerar o desenvolvimento
- ES7 React/Redux/GraphQL/React-Native

Criação de componentes
- Na maioria das vezes componentes ficam em pastas chamada componentes
- Nomeadas com camel case: FistComponents.jsx
- Criar uma função e depois exporta-la com 'export default nome-da-funcao'
- Pela convenção quando for criar componente, utilizar arrow function

Importar componentes
- Utiliza-se a sintaxe: import X from './components/X
- Para colocar o componente dentro do arquivo, colocar em forma de tag: <FistComponents/>

Comentarios no componente
- Na parte da função onde é executada a lógica: //Algum comentario;
- E também no jsx: {/*Algum comentario*/} sempre dentro de alguma div por exemplo 

Template Expressions
- É um recurso que nos permite executar JS no JSX e interpolar variaveis
- A sintaxe é {algumCodigoEmJS} como se fosse template literals em js
- Tudo que ta entre as chaves é processado em JS e nos retorna um resultado
Ex: <p>Você tem {idade} anos.</p>

Hierarquia de componentes
- Componentes podem ser reutilizados em varios componentes
- Podem formar uma hierarquia, sendo importados uns dentro dos outros

Eventos de click
- Eventos de click são essenciais, em Recat podemos utilizar o onClick para
ativar uma função ao clicar em um elementos
- Essa função é criada na propria função do componente 
- Geralmente tem o padrão, como por exemplo: handleAlgumaCoisa;
- Temos funções inline, definida fora do JSX e funções para serem executadas imediamente

* inline: <button onClick={() => alert("Button 1 clicked!")}>Click Me</button>
* fora do JSX: Define a funçõa fora do jsx   
const handleClick = () => {
    alert("Button 2 clicked!");
  };

  e chama dentro do botão:  <button onClick={handleClick}>Click Me 2</button>
*função executada imediamente: Mesma coisa da anterior porem passando ():  <button onClick={handleClick2()}>Click Me 3</button>

Funções de renderização
- Podemos criar funções que retornam JSX dinãmicamente
- Serve para criar situações que dependem de outras condições

Imagens no React
- Imagens publicas podem ficar na pasta public e podem ser chaadas pela /nome.jpeg;
- Por padrão em imagens dos projetos é colocar em uma pasta chamada Assets
- Em assets precisamos importar as imagens, e o src é dinâmico com o nome da importação

Hooks
- Hooks são recursos do react que tem diversas funções
- Guardar e alterar o estado de algum dado na aplicação
- Todo hooj começa com use, como useState
- Hooks precisam ser importados 

useState Hooks
- Um dos mais utilizados
- Usamos para gerenciar o estado de algum dado
- Para guardar o dado definimos o nome da variavel e para alterar vamos utilizar setNome, onde nome é o nome do nosso dado

Renderizar listas
- Uma ação bem comum é renderizar listas de dados no template
- Utilizando o método map, no array
- E podemos iserir jsx em cada interação
- No React, usamos ele para transformar cada item de um array em um elemento JSX

Propriedade Key na renderização de listas
- O react precisa de uma chave unica em cada itens do array
- Isso ajdua na renderização do componente, pois o react precisa saber qual item mudou na renderização
- Por este motivo cada item precisa ter um id

Previous state
- É um recurso que permite pegar um dado em seu valor original dentro de um set de dado
- Utilizado para modificar listas, pois temos o valor antigo transformamos em um valor novo

Renderização condicional
- É quando imorimimos uma parte de um template baseado numa condição
- Ex: Usuario autenticado e não autenticado

Else 
- Utiliza-se tambem if/else no jsx
- Usamos com if ternario
- Onde a sintaxe será: condição ? bloco 1 : bloco 2

Props
- Props nos permite passar valores de um componente pai para um componente filho
- Util quando os dados forem carregados via banco de dados
- As props vem em um objeto no argumento da função do componente
--------------------------------------------------------------------------------------
function Saudacao({ nome }) {
  return <h1>Olá, {nome}!</h1>;
}

// Usando o componente
<Saudacao nome="Américo" />
<Saudacao nome="Maria" />
--------------------------------------------------------------------------------------
nome é uma prop.
Saudacao mostra mensagens diferentes dependendo do valor que recebe.

Desestruturando props
- É super comum passar mais de uma props em um componente
- Para facilitar isso o react nos permite desestruturar as propriedades que chegam, com uso do destructing
- Ex: temos duas propriedades: name e age
- Podemos fazer uma função assim: function MyComponent({name, age})

Reutilização de componentes
- Com a props a reutilização de componentes começa a fazer mais sentido
- Se temos 1000 dados iguais por exemplo, podemos reaproveitar o Componente

Reutilização com loop
- Os arrays podem ter muitos itens
- O correto nesse caso é utilizar a etrutura de loop (map) para exibir na tela

React Fragments
- São interessantes para quando precisamos ter mais de um elemento pai em um componente
- Criamos a tag vazia <> </>
- Serve como elemento pai, não alterando a estrutura do html como a div

Children prop
- É utilizado quando um componente precisa ter jsx dentro dele
- Permite criar componentes reutilizáveis onde o conteúdo muda.
- Você não precisa passar o conteúdo por props específicas como title, text, etc.

Funções me props
- Podem ser passadas para as props normalmente
- Basta criar a função no componente pai e enviar a prop para o componente
-  E no componente filho vai ser ativada por meio de um evento

Elevação de state
- state lift é quando um valor é elevado do componente filho para o componente pai
- Geralmente temos um componente que usa state e outro que altera 

CSS global
- É utilizado para estilizar elementos em comum ou fazer um reset no CSS
- Utiliza-se o arquivo index.CSS
- Fica na pasta src

CSS do componente
- É utilizado em um componente em especifico
- Geralmente é criado um arquivo com o mesmo nome do componente
- Devemos apenas tomar cuidado para estilos de um componente não acabar pegando no outro, resolvemos isso passando
estilos nas classes ao invés das tags

CSS inline
- Passamos estilos css por meio do atributo style
- Devemos optar por outras maneiras de aplicar css, o inline pode dificultar a manutenção do codigo
- A sintaxe é: style={{color: 'red'}}

CSS style dinâmico
- O CSS dinamico inline aplica estilo baseado em uma condição
- Insere no atributo if ternario e dependendo da condição podemos mudar as regras de estilo que um
elemento recebe
- Ex: <h2 style={n > 10 ? { color: "purple" } : { color: "blue" }}></h2>

Classes dinâmicas no css
- Utilizamos logica para alterar classe de um elemento, com if ternario
- Mais interessante do que css inline, pois as classes estarão isoladas no arquivo css, mantendo a organização do codigo

CSS module 
- É um recurso do css scoped
- Vai ser exclusivo do componente
- O nome do arquivo é: Componente.modules.css
- O arquivo modules não lê muito bem classe com my-title, sendo assim a melhor pratica é colocar my_title

Formulario e React
- No React tambem utiliza-se a tag form para formularios
As labels dos inputs contem o atributo htmlFor, que deve ter o valor do name do inputs
Não utiliza-se action, pois o processamento é feito de forma assincrona

LAbel envolvendo inputs
- É padrão comum a tag label envolver o inputs
- Isso torna o html for opcional
- Simplifica a estrutura html sem perder a semântica

Manipulação de valores
- Para manipular os valores dos inputs vamos utilizar o hook useState
- Ou seja podemos armazenar na variavel e utlizar o set para alterar o valor

Simplificando a Manipulação
- Quando temos varios inputs podemos realizar uma manupulação de forma mais simples
- Basicamente uma função inline no onChange
- Vai alterar o valor do state com o metodo set, da mesma forma que a função isolada

Envio de formularios
- Para enviar vamos utilizar o evento onSubmit
- Ele chamara uma função e nesta devemos lembrar de para a submissão com o precentDefault

Controlled inputs
- É um recurso que nos permite mais flexibilidade nos forms de React
- Precisa apenas igualar o valor do state
- Muito comum em: formularios de edição, que os dados vem do back-end, conseguimos preencher o input mais facilmente

Resetando formularios
- Com o controller inputs limpar o form fica mais facil
- Basta atribuir um valor de uma string vazia aos states 
- Isso é feito após o envio do formulario